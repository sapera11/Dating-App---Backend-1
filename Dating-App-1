import java.util.ArrayList;
import java.util.List;

class User {
    private String name;
    private int age;
    
    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }
    
    public String getName() {
        return name;
    }
    
    public int getAge() {
        return age;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        
        User user = (User) obj;
        return age == user.age && name.equals(user.name);
    }
}

class UserAuthentication {
    private List<User> authenticatedUsers;
    
    public UserAuthentication() {
        authenticatedUsers = new ArrayList<>();
    }
    
    public void authenticateUser(User user) {
        authenticatedUsers.add(user);
    }
    
    public boolean isUserAuthenticated(User user) {
        return authenticatedUsers.contains(user);
    }
}

class Messaging {
    public void sendMessage(User sender, User receiver, String message) {
        System.out.println(sender.getName() + " sent a message to " + receiver.getName() + ": " + message);
    }
}

class DatingApp {
    private List<User> users;
    private UserAuthentication userAuthentication;
    private Messaging messaging;
    
    public DatingApp() {
        users = new ArrayList<>();
        userAuthentication = new UserAuthentication();
        messaging = new Messaging();
    }
    
    public void addUser(User user) {
        users.add(user);
    }
    
    public List<User> getUsers() {
        return users;
    }
    
    public List<User> findMatches(User currentUser) {
        List<User> matches = new ArrayList<>();
        
        for (User user : users) {
            if (!user.equals(currentUser) && Math.abs(user.getAge() - currentUser.getAge()) <= 5) {
                matches.add(user);
            }
        }
        
        return matches;
    }
    
    public void authenticateUser(User user) {
        userAuthentication.authenticateUser(user);
    }
    
    public boolean isUserAuthenticated(User user) {
        return userAuthentication.isUserAuthenticated(user);
    }
    
    public void sendMessage(User sender, User receiver, String message) {
        messaging.sendMessage(sender, receiver, message);
    }
}

public class Main {
    public static void main(String[] args) {
        DatingApp datingApp = new DatingApp();
        
        User user1 = new User("Darrella", 25);
        User user2 = new User("Willi", 30);
        User user3 = new User("Tesfaye", 28);
        User user4 = new User("Princess", 27);
        
        datingApp.addUser(user1);
        datingApp.addUser(user2);
        datingApp.addUser(user3);
        datingApp.addUser(user4);
        
        User currentUser = new User("Williams", 27);
        
        datingApp.authenticateUser(user1);
        datingApp.authenticateUser(user2);
        datingApp.authenticateUser(user3);
        datingApp.authenticateUser(user4);
        datingApp.authenticateUser(currentUser);
        
        if (datingApp.isUserAuthenticated(currentUser)) {
            List<User> matches = datingApp.findMatches(currentUser);
            
            System.out.println("Matches for " + currentUser.getName() + ":");
            for (User match : matches) {
                System.out.println(match.getName() + ", " + match.getAge());
            }
            
            User matchUser = matches.get(0); // Assuming there is at least one match
            
            datingApp.sendMessage(currentUser, matchUser, "Hi, how are you?");
        } else {
            System.out.println("User is not authenticated.");
        }
    }
}
